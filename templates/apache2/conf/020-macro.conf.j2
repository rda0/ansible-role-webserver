<IfModule !macro_module>
  Error "mod_macro is required. To enable it run:  a2enmod macro"
</IfModule>

<Macro CheckIfWellKnown>
  SetEnvIfExpr "'${well_known_enabled}' == 'On' && %{REQUEST_URI} =~ m#^/\.well-known(/|$)#" well_known
</Macro>

<Macro RedirectTo $protocol $domain>
  #<If "'${well_known_enabled}' == 'On' && %{REQUEST_URI} =~ m#^/\.well-known(/|$)#">
  Use CheckIfWellKnown
  <If "-n reqenv('well_known')">
    # Do nothing
  </If>
  <ElseIf "tolower(req('Host')) != '$domain' || tolower(%{REQUEST_SCHEME}) != '$protocol'">
    Redirect permanent / $protocol://$domain/
  </ElseIf>
  <Else>
    # Do nothing
  </Else>
</Macro>

<Macro RedirectToSubdir $protocol $domain $subdir>
  #<If "'${well_known_enabled}' == 'On' && %{REQUEST_URI} =~ m#^/\.well-known(/|$)#">
  Use CheckIfWellKnown
  <If "-n reqenv('well_known')">
    # Do nothing
  </If>
  <ElseIf "tolower(req('Host')) != '$domain' || tolower(%{REQUEST_SCHEME}) != '$protocol'">
    Redirect permanent / $protocol://$domain/$subdir
  </ElseIf>
  <Else>
    # Do nothing
  </Else>
</Macro>

<Macro EnableSSLCustom $certname>
  <IfModule !ssl_module>
    Error "mod_ssl is required. To enable it run:  a2enmod ssl"
  </IfModule>
  <IfModule ssl_module>
{% if webserver_https_certificate_ecdsa %}
    <IfFile {{ webserver_letsencrypt_path }}/$certname.ecdsa.crt>
      SSLEngine On
      SSLCertificateFile {{ webserver_letsencrypt_path }}/$certname.ecdsa.crt
      SSLCertificateKeyFile {{ webserver_letsencrypt_path }}/$certname.ecdsa.key
    </IfFile>
{% if webserver_https_fail_if_certificate_missing %}
    <IfFile !{{ webserver_letsencrypt_path }}/$certname.ecdsa.crt>
      Error "No certificate file: {{ webserver_letsencrypt_path }}/$certname.ecdsa.crt"
    </IfFile>
{% endif %}
{% endif %}
{% if webserver_https_certificate_rsa %}
    <IfFile {{ webserver_letsencrypt_path }}/$certname.rsa.crt>
      SSLEngine On
      SSLCertificateFile {{ webserver_letsencrypt_path }}/$certname.rsa.crt
      SSLCertificateKeyFile {{ webserver_letsencrypt_path }}/$certname.rsa.key
    </IfFile>
{% if webserver_https_fail_if_certificate_missing %}
    <IfFile !{{ webserver_letsencrypt_path }}/$certname.rsa.crt>
      Error "No certificate file: {{ webserver_letsencrypt_path }}/$certname.rsa.crt"
    </IfFile>
{% endif %}
{% endif %}
  </IfModule>
</Macro>

<Macro EnableSSL>
{% if webserver_letsencrypt_aliases|length == 1 %}
  Use EnableSSLCustom {{ (webserver_letsencrypt_aliases[0]['name'])|default('le0') }}
{% else %}
  Error "Multiple certificates available, use explicit certificate: EnableSSLCustom <name>"
{% endif %}
</Macro>

<Macro SecurityTweaksSSL>
  <IfModule headers_module>
    # HSTS 1 week
    #Header always set Strict-Transport-Security "max-age=604800;"
    Header always set Strict-Transport-Security "max-age=60;"
    Header always set X-Frame-Options deny
  </IfModule>
</Macro>

### VHost macros

<Macro ServerLog $name $protocol>
  LogLevel {{ websserver_log_level }}
  ErrorLog ${APACHE_LOG_DIR}/$name_$protocol_error.log
  CustomLog ${APACHE_LOG_DIR}/$name_$protocol_access.log combined env=!dontlog
#  <IfModule !ssl_module>
#    CustomLog ${APACHE_LOG_DIR}/debug.log vhost_combined_global env=!dontdebug
#  </IfModule>
#  <IfModule ssl_module>
#    CustomLog ${APACHE_LOG_DIR}/debug.log vhost_combined_global_tls env=!dontdebug
#  </IfModule>
{% if webserver_log_lastuse %}
  CustomLog ${APACHE_LOG_DIR}/lastuse.fifo lastuse
{% endif %}
</Macro>
{% if webserver_webshare %}

<Macro ShareLog $name $protocol>
  LogLevel {{ websserver_log_level }}
  ErrorLog ${webshare_doc_root}/$name/logs/$protocol_error.log
  CustomLog ${webshare_doc_root}/$name/logs/$protocol_access.log combined env=!dontlog
#  <IfModule !ssl_module>
#    CustomLog ${APACHE_LOG_DIR}/debug.log vhost_combined_global env=!dontdebug
#  </IfModule>
#  <IfModule ssl_module>
#    CustomLog ${APACHE_LOG_DIR}/debug.log vhost_combined_global_tls env=!dontdebug
#  </IfModule>
{% if webserver_log_lastuse %}
  CustomLog ${APACHE_LOG_DIR}/lastuse.fifo lastuse
{% endif %}
</Macro>
{% endif %}

<Macro NoVHost404 $server_name>
    SetEnvIfExpr "tolower(req('Host')) == '$server_name'" server_name_match
</Macro>

<Macro ShowVHost404>
  Use CheckIfWellKnown
  ErrorDocument 404 /404_file.shtml
  <If "-z reqenv('server_name_match') && -z %{ENV:REDIRECT_STATUS} && -z reqenv('well_known')">
    ErrorDocument 404 /404_vhost.shtml
    Redirect 404 /
  </If>
</Macro>

<Macro EnableProxy $port>
  # check wich proxy module required?
  <IfModule !proxy_module>
    Error "mod_proxy is required. To enable it run:  a2enmod proxy"
  </IfModule>
  <IfModule !proxy_http_module>
    Error "mod_proxy_http is required. To enable it run:  a2enmod proxy_http"
  </IfModule>
  HostnameLookups On
  ProxyPass / http://localhost:$port/ retry=0
  ProxyPassReverse / http://localhost:$port/
</Macro>

### Permissions

<Macro GrantDirAll $dir>
  <Directory "$dir">
    Require all granted
  </Directory>
</Macro>
{% if webserver_webshare %}

<Macro GrantShareAll $name>
  <Directory "${webshare_doc_root}/$name/htdocs">
    Require all granted
    AllowOverride All
    Options All MultiViews
  </Directory>
  <Directory "${webshare_doc_root}/$name/cgi-bin">
    Require all granted
    AllowOverride None
    Options ExecCGI
  </Directory>
</Macro>

<Macro GrantSharePhys $name>
  <Directory "${webshare_doc_root}/$name/htdocs">
    Use PhysLDAP
    Require valid-user
    AllowOverride All
    Options All MultiViews
  </Directory>
  <Directory "${webshare_doc_root}/$name/cgi-bin">
    Use PhysLDAP
    Require valid-user
    AllowOverride None
    Options ExecCGI
  </Directory>
</Macro>

<Macro GrantSharePhysOrFromNetwork $name>
  <Directory "${webshare_doc_root}/$name/htdocs">
    Use PhysLDAP
    <RequireAny>
      Require valid-user
      Require host ethz.ch
    </RequireAny>
    AllowOverride All
    Options All MultiViews
  </Directory>
  <Directory "${webshare_doc_root}/$name/cgi-bin">
    Use PhysLDAP
    <RequireAny>
      Require valid-user
      Require host ethz.ch
    </RequireAny>
    AllowOverride None
    Options ExecCGI
  </Directory>
</Macro>
{% endif %}

### Server configurations

<Macro ServerCustom $name $protocol $domain $dir>
  ServerName $domain
  DocumentRoot "$dir"
  Use ServerLog $name $protocol
</Macro>

<Macro Server $name $protocol $domain>
  Use ServerCustom $name $protocol $domain ${doc_root}/$name
</Macro>

<Macro ServerRedirect $name $protocol $domain>
  Use ServerCustom $name $protocol $domain ${doc_root}/$name
  Use RedirectTo https $domain
</Macro>

<Macro ServerGrant $name $protocol $domain>
  Use Server $name $protocol $domain
  Use GrantDirAll ${doc_root}/$name
</Macro>

<Macro ServerRedirectGrant $name $protocol $domain>
  Use ServerRedirect $name $protocol $domain
  Use GrantDirAll ${doc_root}/$name
</Macro>

### ServerEmpty (for redirect only)

<Macro ServerEmpty $name $protocol $domain>
  Use ServerCustom $name $protocol $domain ${empty_doc_root}
</Macro>

<Macro ServerEmptyRedirectCustom $name $protocol $domain $redirect_protocol $redirect_domain>
  Use ServerEmpty $name $protocol $domain
  <Location />
    Require all granted
  </Location>
  Use RedirectTo $redirect_protocol $redirect_domain
</Macro>

<Macro ServerEmptyRedirect $name $protocol $domain>
  Use ServerEmptyRedirectCustom $name $protocol $domain https $domain
</Macro>
{% if webserver_webshare %}

### Share (for webshares "wwwshare")

<Macro Share $name $protocol $domain>
  ServerName $domain
  DocumentRoot "${webshare_doc_root}/$name/htdocs"
  ScriptAlias /cgi-bin/ "${webshare_doc_root}/$name/cgi-bin/"
  Use ShareLog $name $protocol
</Macro>

<Macro ShareRedirect $name $protocol $domain>
  Use Share $name $protocol $domain
  Use RedirectTo https $domain
</Macro>

<Macro ShareGrant $name $protocol $domain>
  Use Share $name $protocol $domain
  Use GrantShareAll $name
</Macro>

<Macro ShareRedirectGrant $name $protocol $domain>
  Use ShareRedirect $name $protocol $domain
  Use GrantShareAll $name
</Macro>

### ShareEmpty (for redirect only)

<Macro ShareEmptyRedirectCustom $name $protocol $domain $redirect_protocol $redirect_domain>
  ServerName $domain
  DocumentRoot "${empty_doc_root}"
  Use ShareLog $name $protocol
  <Location />
    Require all granted
  </Location>
  Use RedirectTo $redirect_protocol $redirect_domain
</Macro>

<Macro ShareEmptyRedirect $name $protocol $domain>
  Use ShareEmptyRedirectCustom $name $protocol $domain https $domain
</Macro>

{% endif %}
