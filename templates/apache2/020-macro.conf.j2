<IfModule !macro_module>
  Error "mod_macro is required. To enable it run:  a2enmod macro"
</IfModule>

<Macro CheckIfWellKnown>
  SetEnvIfExpr "'${well_known_enabled}' == 'On' && %{REQUEST_URI} =~ m#^/\.well-known(/|$)#" well_known
</Macro>

<Macro RedirectTo $protocol $domain>
  #<If "'${well_known_enabled}' == 'On' && %{REQUEST_URI} =~ m#^/\.well-known(/|$)#">
  Use CheckIfWellKnown
  <If "-n reqenv('well_known')">
    # Do nothing
  </If>
  <ElseIf "tolower(req('Host')) != '$domain' || tolower(%{REQUEST_SCHEME}) != '$protocol'">
    Redirect permanent / $protocol://$domain/
  </ElseIf>
  <Else>
    # Do nothing
  </Else>
</Macro>

<Macro RedirectToSubdir $protocol $domain $subdir>
  #<If "'${well_known_enabled}' == 'On' && %{REQUEST_URI} =~ m#^/\.well-known(/|$)#">
  Use CheckIfWellKnown
  <If "-n reqenv('well_known')">
    # Do nothing
  </If>
  <ElseIf "tolower(req('Host')) != '$domain' || tolower(%{REQUEST_SCHEME}) != '$protocol'">
    Redirect permanent / $protocol://$domain/$subdir
  </ElseIf>
  <Else>
    # Do nothing
  </Else>
</Macro>

<Macro EnableSSLCustom ${certname}>
  <IfModule !ssl_module>
    Error "mod_ssl is required. To enable it run:  a2enmod ssl"
  </IfModule>
  <IfModule ssl_module>
{% if webserver_https_certificate_ecdsa %}
    <IfFile {{ webserver_letsencrypt_path }}/${certname}.ecdsa.crt>
      SSLEngine On
      SSLCertificateFile {{ webserver_letsencrypt_path }}/${certname}.ecdsa.crt
      SSLCertificateKeyFile {{ webserver_letsencrypt_path }}/${certname}.ecdsa.key
    </IfFile>
    <IfFile !{{ webserver_letsencrypt_path }}/${certname}.ecdsa.crt>
      Error "No certificate file: {{ webserver_letsencrypt_path }}/${certname}.ecdsa.crt"
    </IfFile>
{% endif %}
{% if webserver_https_certificate_rsa %}
    <IfFile {{ webserver_letsencrypt_path }}/${certname}.rsa.crt>
      SSLEngine On
      SSLCertificateFile {{ webserver_letsencrypt_path }}/${certname}.rsa.crt
      SSLCertificateKeyFile {{ webserver_letsencrypt_path }}/${certname}.rsa.key
    </IfFile>
    <IfFile !{{ webserver_letsencrypt_path }}/${certname}.rsa.crt>
      Error "No certificate file: {{ webserver_letsencrypt_path }}/${certname}.rsa.crt"
    </IfFile>
{% endif %}
  </IfModule>
</Macro>

<Macro EnableSSL>
  Use EnableSSLCustom ${hostname}
</Macro>

### VHost macros

<Macro ServerLog $name $protocol>
  LogLevel warn
  ErrorLog ${APACHE_LOG_DIR}/$name_$protocol_error.log
  CustomLog ${APACHE_LOG_DIR}/$name_$protocol_access.log combined
  <IfModule !ssl_module>
    CustomLog ${APACHE_LOG_DIR}/debug.log vhost_combined
  </IfModule>
  <IfModule ssl_module>
    CustomLog ${APACHE_LOG_DIR}/debug.log vhost_combined_tls
  </IfModule>
{% if webserver_log_lastuse %}
  CustomLog ${APACHE_LOG_DIR}/lastuse.fifo lastuse
{% endif %}
</Macro>

<Macro ShareLog $protocol>
  LogLevel warn
  ErrorLog ${webshare_doc_root}/$protocol_error.log
  CustomLog ${webshare_doc_root}/$protocol_access.log combined
  <IfModule !ssl_module>
    CustomLog ${APACHE_LOG_DIR}/debug.log vhost_combined
  </IfModule>
  <IfModule ssl_module>
    CustomLog ${APACHE_LOG_DIR}/debug.log vhost_combined_tls
  </IfModule>
{% if webserver_log_lastuse %}
  CustomLog ${APACHE_LOG_DIR}/lastuse.fifo lastuse
{% endif %}
</Macro>

<Macro NoVHost404 $server_name>
    SetEnvIfExpr "tolower(req('Host')) == '$server_name'" server_name_match
</Macro>

<Macro ShowVHost404>
  Use CheckIfWellKnown
  ErrorDocument 404 /404_file.shtml
  <If "-z reqenv('server_name_match') && -z %{ENV:REDIRECT_STATUS} && -z reqenv('well_known')">
    ErrorDocument 404 /404_vhost.shtml
    Redirect 404 /
  </If>
</Macro>

<Macro EnableProxy $port>
  # check wich proxy module required?
  <IfModule !proxy_module>
    Error "mod_proxy is required. To enable it run:  a2enmod proxy"
  </IfModule>
  <IfModule !proxy_http_module>
    Error "mod_proxy_http is required. To enable it run:  a2enmod proxy_http"
  </IfModule>
  HostnameLookups On
  ProxyPass / http://localhost:$port/ retry=0
  ProxyPassReverse / http://localhost:$port/
</Macro>

### Permissions

<Macro DirGrantAll $dir>
  <Directory "$dir">
    Require all granted
  </Directory>
</Macro>

### BlackHole

<Macro BlackHoleCustom $protocol $dir>
  ServerName 0
  DocumentRoot $dir
  Use DirGrantAll $dir
  Use ServerLog blackhole $protocol
</Macro>

<Macro BlackHole $protocol>
  Use BlackHoleCustom $protocol ${default_doc_root}
</Macro>

<Macro VHostBlackHole>
  <VirtualHost *:80>
    Use BlackHole http
  </VirtualHost>
  <VirtualHost *:443>
    Use BlackHole https
    Use EnableSSL
  </VirtualHost>
</Macro>

### Server configurations

<Macro ServerCustom $name $protocol $domain $dir>
  ServerName $domain
  DocumentRoot "$dir"
  Use ServerLog $name $protocol
</Macro>

<Macro ServerDefault $name $protocol $domain>
  Use ServerCustom $name $protocol $domain ${doc_root}/$name
  Use RedirectTo $protocol $domain
</Macro>

<Macro ServerDefaultGrant $name $protocol $domain>
  Use ServerDefault $name $protocol $domain
  Use DirGrantAll ${doc_root}/$name
</Macro>

<Macro ServerRedirect $name $protocol $domain $redirect_protocol $redirect_domain>
  Use ServerCustom $name $protocol $domain ${empty_doc_root}
  <Location />
    Require all granted
  </Location>
  Use RedirectTo $redirect_protocol $redirect_domain
</Macro>
{% if webserver_webshare %}

<Macro ShareGrantAll ${name}>
  <Directory "${webshare_doc_root}/${name}/htdocs">
    Require all granted
    AllowOverride All
    Options All MultiViews
  </Directory>
  <Directory "${webshare_doc_root}/${name}/cgi-bin">
    Require all granted
    AllowOverride None
    Options ExecCGI
  </Directory>
</Macro>

<Macro ShareGrantPhys ${name}>
  <Directory "${webshare_doc_root}/${name}/htdocs">
    Use PhysLDAP
    Require valid-user
    AllowOverride All
    Options All MultiViews
  </Directory>
  <Directory "${webshare_doc_root}/${name}/cgi-bin">
    Use PhysLDAP
    Require valid-user
    AllowOverride None
    Options ExecCGI
  </Directory>
</Macro>

<Macro ShareGrantPhysOrFromNetwork ${name}>
  <Directory "${webshare_doc_root}/${name}/htdocs">
    Use PhysLDAP
    <RequireAny>
      Require valid-user
      Require host ethz.ch
    </RequireAny>
    AllowOverride All
    Options All MultiViews
  </Directory>
  <Directory "${webshare_doc_root}/${name}/cgi-bin">
    Use PhysLDAP
    <RequireAny>
      Require valid-user
      Require host ethz.ch
    </RequireAny>
    AllowOverride None
    Options ExecCGI
  </Directory>
</Macro>

<Macro ServerShareCustom ${name} $protocol $domain>
  ServerName $domain
  DocumentRoot "${webshare_doc_root}/${name}/htdocs"
  ScriptAlias /cgi-bin/ "${webshare_doc_root}/${name}/cgi-bin/"
  Use ShareLog $protocol
</Macro>

<Macro ServerShareDefault $name $protocol $domain>
  Use ServerShareCustom $name $protocol $domain
  Use RedirectTo $protocol $domain
</Macro>

<Macro ServerShareDefaultGrant $name $protocol $domain>
  Use ServerShareDefault $name $protocol $domain
  Use ShareGrantAll $name
</Macro>

<Macro ShareRedirect $protocol $domain $redirect_protocol $redirect_domain>
  ServerName $domain
  DocumentRoot "${empty_doc_root}"
  Use ShareLog $protocol
  <Location />
    Require all granted
  </Location>
  Use RedirectTo $redirect_protocol $redirect_domain
</Macro>
{% endif %}
