- name: flush handlers
  meta: flush_handlers

- name: install nginx
  package:
    pkg:
      - nginx

- name: create systemd nginx.service.d directory
  file:
    path: /etc/systemd/system/nginx.service.d/
    state: directory
    owner: root
    group: root
    mode: 0755
  when: webserver_service_nginx_limit_number_of_open_files != ''

- name: deploy systemd apache2.service override
  template:
    src: nginx/service/override.conf.j2
    dest: /etc/systemd/system/nginx.service.d/override.conf
    owner: root
    group: root
    mode: 0644
  notify: reload systemd
  when: webserver_service_nginx_limit_number_of_open_files != ''

- name: remove systemd nginx.service override
  file:
    path: /etc/systemd/system/nginx.service.d/override.conf
    state: absent
  notify: reload systemd
  when: not (webserver_service_nginx_limit_number_of_open_files != '')

- name: 'deploy {{ webserver_https_dh_params_size }} bit dh parameters (takes some time)'
  command: 'openssl dhparam -out /etc/ssl/private/dhparam_{{ webserver_https_dh_params_size }}.pem {{ webserver_https_dh_params_size }}'
  args:
    creates: '/etc/ssl/private/dhparam_{{ webserver_https_dh_params_size }}.pem'
  notify: restart nginx
  when: webserver_https_dh_params_custom

- name: set custom dh params permissions
  file:
    path: '/etc/ssl/private/dhparam_{{ webserver_https_dh_params_size }}.pem'
    owner: root
    group: ssl-cert
    mode: 0640
  when: webserver_https_dh_params_custom

- name: create directories in /var/www
  file:
    path: '/var/www/{{ item }}'
    state: directory
    owner: root
    group: root
    mode: 0755
  loop:
    - empty
    - default

- name: deploy main server config
  template:
    src: 'nginx/conf/nginx.conf.j2'
    dest: '/etc/nginx/nginx.conf'
    owner: root
    group: root
    mode: 0644
  notify: restart nginx

- name: flush handlers
  meta: flush_handlers

- name: deploy openssl config
  template:
    src: 'openssl/openssl.cnf.j2'
    dest: '/etc/ssl/openssl.cnf'
    owner: root
    group: root
    mode: 0644
  notify: restart nginx

- name: deploy conf.d config
  template:
    src: 'nginx/conf/{{ item }}.conf.j2'
    dest: '/etc/nginx/conf.d/{{ item }}.conf'
    owner: root
    group: root
    mode: 0644
  notify: restart nginx
  loop:
    - 001-https
    - 002-security

- name: deploy config snippets for certificates
  template:
    src: 'nginx/conf/certificates.conf.j2'
    dest: "/etc/nginx/snippets/https-{{ (item.name | default(''.join(['le', index | string]))) }}.conf"
    owner: root
    group: root
    mode: 0644
  notify: restart nginx
  vars:
    name: "{{ (item.name | default(''.join(['le', index | string]))) }}"
  loop: '{{ webserver_letsencrypt_aliases | flatten(levels=1) }}'
  loop_control:
    index_var: index

- name: deploy config snippets for networks
  template:
    src: 'nginx/conf/networks.conf.j2'
    dest: '/etc/nginx/snippets/allow-net-{{ item.name }}.conf'
    owner: root
    group: root
    mode: 0644
  notify: restart nginx
  loop:
    - { name: adm, ipv4: '{{ webserver_net4_adm }}', ipv6: '{{ webserver_net6_adm }}' }
    - { name: san, ipv4: '{{ webserver_net4_san }}', ipv6: '{{ webserver_net6_san }}' }
    - { name: srv, ipv4: '{{ webserver_net4_srv }}', ipv6: '{{ webserver_net6_srv }}' }
    - { name: lan, ipv4: '{{ webserver_net4_lan }}', ipv6: '{{ webserver_net6_lan }}' }
    - { name: can, ipv4: '{{ webserver_net4_can + webserver_net4_prvcan }}', ipv6: '{{ webserver_net6_can + webserver_net6_prvcan }}' }
    - { name: cun, ipv4: '{{ webserver_net4_cun }}', ipv6: '{{ webserver_net6_cun }}' }

- name: deploy default site content
  template:
    src: 'sites/default.index.html.j2'
    dest: '/var/www/default/index.html'
    owner: root
    group: root
    mode: 0644
  when: webserver_site_deploy_default

- name: deploy webserver logo
  copy:
    src: 'nginx/logo.png'
    dest: '/var/www/default/webserver.png'
    owner: root
    group: root
    mode: 0644
  when: webserver_site_deploy_default

- name: cleanup default config
  file:
    dest: '/etc/nginx/sites-{{ item }}/default'
    state: absent
  loop:
    - enabled
    - available

- name: deploy sites-available config - 000-default
  template:
    src: 'nginx/sites/000-default.conf.j2'
    dest: '/etc/nginx/sites-available/000-default.conf'
    owner: root
    group: root
    mode: 0644
  notify: reload nginx
  when: webserver_site_enable_default

- name: enable sites-enabled config - 000-default
  file:
    src: '../sites-available/000-default.conf'
    dest: '/etc/nginx/sites-enabled/000-default.conf'
    state: link
  notify: reload nginx
  when: webserver_site_enable_default

- name: tags-block
  tags: webserver_vhosts
  block:
  - name: include vhosts
    include_tasks: vhosts.yml
    when: include_webserver_vhosts

- name: deploy nginx logrotate conf
  template:
    src: nginx/log/nginx.logrotate.j2
    dest: /etc/logrotate.d/nginx
    owner: root
    group: root
    mode: 0644
